/*
 * Copyright 2019-2020 Robbyxp1 @ github.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */


using OpenTK.Graphics.OpenGL4;
using System;
using System.Drawing;

namespace GLOFC.GL4.Textures
{
    /// <summary>
    /// 2 Dimensional texture
    /// </summary>

    public class GLTexture2D : GLTextureBase 
    {
        /// <summary> Constructor </summary>
        public GLTexture2D()
        {
        }

        /// <summary>
        /// Construct a texture from a bitmap
        /// </summary>
        /// <param name="bmp">Bitmap</param>
        /// <param name="internalformat">Internal format, see InternalFormat in Texture base class</param>/// 
        /// <param name="bmpmipmaplevels">Mip map levels in bitmap</param>
        /// <param name="wantedmipmaplevels">Mip map levels wanted in texture</param>
        /// <param name="ownbmp">Class will own the bitmap</param>
        /// <param name="alignment">Load into texture with this alignment, it bitmap is smaller than texture. Only for mipmaplevel = 0.  Use only for autogenerated mipmaps or no mip maps</param>
        public GLTexture2D(Bitmap bmp, SizedInternalFormat internalformat, int bmpmipmaplevels = 1,
                            int wantedmipmaplevels = 1, bool ownbmp = false, ContentAlignment alignment = ContentAlignment.TopLeft)
        {
            CreateLoadBitmap(bmp, internalformat, bmpmipmaplevels, wantedmipmaplevels, ownbmp, alignment);
        }

        /// <summary>
        /// Create of update the texture with a new size and format
        /// You can call as many times to create textures. Only creates one if required
        /// mipmaplevels does not apply if multisample > 0 
        /// Rgba8 is the normal one to pick
        /// </summary>
        /// <param name="width">Width of texture</param>
        /// <param name="height">Height of texture</param>
        /// <param name="internalformat">Internal format, see InternalFormat in Texture base class</param>/// 
        /// <param name="mipmaplevels">Mip map levels wanted</param>
        /// <param name="multisample">Multisample count, normally 0</param>
        /// <param name="fixedmultisampleloc">Fix multisample positions in the same place for all texel in image</param>
        public void CreateOrUpdateTexture(int width, int height, SizedInternalFormat internalformat, int mipmaplevels = 1,
                                                            int multisample = 0, bool fixedmultisampleloc = false)
        {
            // if not there, or changed, we can't just replace it, size is fixed. Delete it

            if (Id < 0 || Width != width || Height != height || mipmaplevels != MipMapLevels || multisample != MultiSample)
            {
                if (Id >= 0)     // dispose if set
                    Dispose();

                InternalFormat = internalformat;
                Width = width;
                Height = height;
                MipMapLevels = mipmaplevels;
                MultiSample = multisample;

                GL.CreateTextures(MultiSample > 0 ? TextureTarget.Texture2DMultisample : TextureTarget.Texture2D, 1, out int id);
                GLStatics.RegisterAllocation(typeof(GLTexture2D));
                GLStatics.Check();
                Id = id;

                if (MultiSample > 0)
                {
                    GL.TextureStorage2DMultisample(Id,MultiSample,InternalFormat,Width,Height,fixedmultisampleloc);
                }
                else
                {
                    GL.TextureStorage2D( Id, mipmaplevels, InternalFormat, Width, Height);
                }

                SetMinMagFilter();

                GLStatics.Check();
            }
        }

        /// <summary>
        /// Create or update texture using this pixel format - special. Used for depth or stencil buffers
        /// See <href>https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glTexImage2D.xhtml</href>
        /// </summary>
        /// <param name="width">Width of texture</param>
        /// <param name="height">Height of texture</param>
        /// <param name="pixelinternalformat">Pixel internal format</param>
        /// <param name="pixelformat">Pixel format</param>
        /// <param name="pixeltype">Pixel type</param>
        public void CreateOrUpdateTexturePixelFormat(int width, int height, PixelInternalFormat pixelinternalformat, PixelFormat pixelformat, PixelType pixeltype)   // make with a pixel format..
        {
            if (Id < 0 || Width != width || Height != height)    // if not there, or changed, we can't just replace it, size is fixed. Delete it
            {
                if (Id >= 0)
                {
                    Dispose();
                }

                InternalFormat = 0;         // PixelInternalFormat does not fit within this, so zero it
                Width = width;
                Height = height;
                MipMapLevels = 1;

                GL.CreateTextures(TextureTarget.Texture2D, 1, out int id);
                GLStatics.RegisterAllocation(typeof(GLTexture2D));
                GLStatics.Check();
                Id = id;

                GL.BindTexture(TextureTarget.Texture2D, Id);

                GL.TexImage2D(TextureTarget.Texture2D, 0, pixelinternalformat, width, height, 0, pixelformat, pixeltype, (IntPtr)0);     // we don't actually load data in, so its a null ptr.

                GLStatics.Check();
            }
        }

        /// <summary>
        /// Create a depth buffer
        /// </summary>
        /// <param name="width">Width of texture</param>
        /// <param name="height">Height of texture</param>
        public void CreateDepthBuffer(int width, int height)
        {
            CreateOrUpdateTexturePixelFormat(width, height, PixelInternalFormat.DepthComponent32f, PixelFormat.DepthComponent, PixelType.Float);
        }

        /// <summary>
        /// Create a stencil buffer
        /// </summary>
        /// <param name="width">Width of texture</param>
        /// <param name="height">Height of texture</param>
        public void CreateDepthStencilBuffer(int width, int height)
        {
            CreateOrUpdateTexturePixelFormat(width, height, PixelInternalFormat.Depth32fStencil8, PixelFormat.DepthComponent, PixelType.Float);
        }

        /// <summary>
        /// Create and load a bitmap. You can reload the bitmap, it will create a new Texture if required
        /// </summary>
        /// <param name="bmp">Bitmap to load</param>
        /// <param name="internalformat">Internal format, see InternalFormat in Texture base class</param>/// 
        /// <param name="bmpmipmaplevels">Mip map levels in bitmap</param>
        /// <param name="wantedmipmaplevels">Mip map levels wanted in texture</param>
        /// <param name="ownbmp">Class will own the bitmap</param>
        /// <param name="alignment">Load into texture with this alignment, it bitmap is smaller than texture. Only for mipmaplevel = 0.  Use only for autogenerated mipmaps or no mip maps</param>
        public void CreateLoadBitmap(Bitmap bmp, SizedInternalFormat internalformat, int bmpmipmaplevels = 1,
                                                int wantedmipmaplevels = 1, bool ownbmp = false, ContentAlignment alignment = ContentAlignment.TopLeft)
        {
            int h = MipMapHeight(bmp, bmpmipmaplevels);

            // create a texture of bmp width, mipmapheight, and indicate the mip map levels the texture needs (max of bitmap and wanted
            CreateOrUpdateTexture(bmp.Width, h, internalformat, Math.Max(bmpmipmaplevels, wantedmipmaplevels));      

            LoadBitmap(bmp, -1, ownbmp, bmpmipmaplevels, alignment);    // use common load into bitmap, indicating its a 2D texture so use texturesubimage2d

            if (bmpmipmaplevels == 1 && wantedmipmaplevels > 1)     // single level mipmaps with genmipmap levels > 1 get auto gen
                GL.GenerateTextureMipmap(Id);

            GLStatics.Check();

            // float[] tex = GetTextureImageAsFloats(end:100);
        }

        /// <summary>
        /// From Renderbuffer
        /// </summary>
        /// <param name="rb">Renderbuffer</param>
        /// <param name="sx">Source X</param>
        /// <param name="sy">Source Y</param>
        /// <param name="dmiplevel">Destination mip level</param>
        /// <param name="dx">Destination X</param>
        /// <param name="dy">Destination Y</param>
        /// <param name="width">Destination Width</param>
        /// <param name="height">Destination Height</param>
        public void CopyFrom(GLRenderBuffer rb, int sx, int sy, int dmiplevel, int dx, int dy, int width, int height)
        {
            GL.CopyImageSubData(rb.Id, ImageTarget.Renderbuffer, 0, sx, sy, 0,
                                    Id, ImageTarget.Texture2D, dmiplevel, dx, dy, 0, width, height, 1);
            GLStatics.Check();
        }
    }
}

