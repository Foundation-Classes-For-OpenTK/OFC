/*
 * Copyright 2019-2021 Robbyxp1 @ github.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

using OpenTK.Graphics.OpenGL4;
using System;
using System.Drawing;

namespace GLOFC.GL4.Textures
{
    /// <summary>
    /// 2 Dimensional array texture. 2d arrays do not interpolate between z pixels, unlike 3d textures
    /// </summary>

    public class GLTexture2DArray : GLTextureBase          // load a 2D set of textures into open gl
    {
        /// <summary> Constructor </summary>
        public GLTexture2DArray()
        {
        }

        /// <summary>
        /// Construct a texture from bitmaps. Bitmap 0 gives the common width/height of the image.
        /// </summary>
        /// <param name="bmps">Array of Bitmaps</param>
        /// <param name="internalformat">Internal format, see InternalFormat in Texture base class</param>/// 
        /// <param name="bmpmipmaplevels">Mip map levels in bitmap</param>
        /// <param name="wantedmipmaplevels">Mip map levels wanted in texture</param>
        /// <param name="ownbmp">Class will own the bitmap</param>
        /// <param name="texturesize">Optional size of texture, set to force the texture size (otherwise based on bmps[0])</param>
        /// <param name="alignment">Load into texture with this alignment, it bitmap is smaller than texture. Only for mipmaplevel = 0.  Use only for autogenerated mipmaps or no mip maps</param>
        public GLTexture2DArray(Bitmap[] bmps, SizedInternalFormat internalformat, int bmpmipmaplevels = 1, int wantedmipmaplevels = 1, bool ownbmp = false, Size? texturesize = null, ContentAlignment alignment = ContentAlignment.TopLeft)
        {
            CreateLoadBitmaps(bmps, internalformat, bmpmipmaplevels, wantedmipmaplevels, ownbmp, texturesize, alignment);
        }

        /// <summary>
        /// Create a texture
        /// </summary>
        /// <param name="width">Width of texture</param>
        /// <param name="height">Height of texture</param>
        /// <param name="depth">Number of levels of texture</param>
        /// <param name="internalformat">Internal format, see InternalFormat in Texture base class</param>/// 
        /// <param name="wantedmipmaplevels">Mip map levels wanted in texture</param>
        public GLTexture2DArray(int width, int height, int depth, SizedInternalFormat internalformat, int wantedmipmaplevels = 1)
        {
            CreateOrUpdateTexture(width, height, depth, internalformat, wantedmipmaplevels);
        }

        /// <summary>
        /// Create of update the texture with a new size and format
        /// You can call as many times to create textures. Only creates one if required
        /// mipmaplevels does not apply if multisample > 0 
        /// Rgba8 is the normal one to pick
        /// </summary>
        /// <param name="width">Width of texture</param>
        /// <param name="height">Height of texture</param>
        /// <param name="depth">Number of levels of texture</param>
        /// <param name="internalformat">Internal format, see InternalFormat in Texture base class</param>/// 
        /// <param name="wantedmipmaplevels">Mip map levels wanted in texture</param>
        /// <param name="multisample">Multisample count, normally 0</param>
        /// <param name="fixedmultisampleloc">Fix multisample positions in the same place for all texel in image</param>
        public void CreateOrUpdateTexture(int width, int height, int depth, SizedInternalFormat internalformat, int wantedmipmaplevels = 1,
                                    int multisample = 0, bool fixedmultisampleloc = false)
        {
            if (Id < 0 || Width != width || Height != height || Depth != depth || wantedmipmaplevels != MipMapLevels || MultiSample != multisample)
            {
                if (Id >= 0)
                    Dispose();

                InternalFormat = internalformat;
                Width = width;
                Height = height;
                Depth = depth;
                MipMapLevels = wantedmipmaplevels;
                MultiSample = multisample;

                GL.CreateTextures(MultiSample > 0 ? TextureTarget.Texture2DMultisampleArray : TextureTarget.Texture2DArray, 1, out int id);
                GLStatics.RegisterAllocation(typeof(GLTexture2DArray));
                GLStatics.Check();
                Id = id;

                if (MultiSample > 0)
                {
                    GL.TextureStorage3DMultisample(Id, MultiSample, InternalFormat, Width, Height, Depth, fixedmultisampleloc);
                }
                else
                {
                    GL.TextureStorage3D(Id, wantedmipmaplevels, InternalFormat, Width, Height, Depth);
                }

                SetMinMagFilter();

                GLStatics.Check();
            }
        }

        /// <summary>
        /// Load from bitmaps. Bitmap 0 gives the common width/height of the image.
        /// You can reload the bitmap, it will create a new Texture if required. 
        /// Bitmaps array can be sparse will null entries if you don't want to use that level. 
        /// </summary>
        /// <param name="bmps">Array of Bitmaps</param>
        /// <param name="internalformat">Internal format, see InternalFormat in Texture base class</param>/// 
        /// <param name="bmpmipmaplevels">Mip map levels in bitmap</param>
        /// <param name="wantedmipmaplevels">Mip map levels wanted in texture</param>
        /// <param name="ownbmp">Class will own the bitmap</param>
        /// <param name="texturesize">Optional size of texture, set to force the texture size (otherwise based on bmps[0])</param>
        /// <param name="alignment">Load into texture with this alignment, it bitmap is smaller than texture. Only for mipmaplevel = 0.  Use only for autogenerated mipmaps or no mip maps</param>

        public void CreateLoadBitmaps(Bitmap[] bmps, SizedInternalFormat internalformat, int bmpmipmaplevels = 1, int wantedmipmaplevels = 1,
                                               bool ownbmp = false, Size? texturesize = null, ContentAlignment alignment = ContentAlignment.TopLeft)
        {
            int width = texturesize.HasValue ? texturesize.Value.Width : bmps[0].Width;
            int height = texturesize.HasValue ? texturesize.Value.Height : MipMapHeight(bmps[0], bmpmipmaplevels);        // if bitmap is mipped mapped, work out correct height.
            int texmipmaps = Math.Max(bmpmipmaplevels, wantedmipmaplevels);

            CreateOrUpdateTexture(width, height, bmps.Length, internalformat, texmipmaps);

            for (int zorder = 0; zorder < bmps.Length; zorder++)      // for all bitmaps, we load the texture into zoffset of 2darray
            {
                if (bmps[zorder] != null)       // it can be sparse
                    LoadBitmap(bmps[zorder], zorder, ownbmp, bmpmipmaplevels, alignment);   // load into bitmapnumber zoffset level
            }

            if (bmpmipmaplevels == 1 && wantedmipmaplevels > 1)     // single level mipmaps with genmipmap levels > 1 get auto gen
                GL.GenerateTextureMipmap(Id);

            GLStatics.Check();
        }
    }
}
